apiVersion: apps/v1
kind: Deployment
metadata:
  name: minio-server
spec:
  replicas: {{ $.Values.minio.replicas }}
  revisionHistoryLimit: {{ $.Values.minio.revisionHistoryLimit }}
  selector:
    matchLabels:
      app: minio-server
  strategy: {{ toYaml $.Values.minio.strategy | nindent 4 }}
  template:
    metadata:
      labels:
        app: minio-server
    spec:
      dnsPolicy: ClusterFirst
      terminationGracePeriodSeconds: {{ $.Values.minio.terminationGracePeriodSeconds }}
      automountServiceAccountToken: false
      {{- if $.Values.minio.nodeSelector }}
      nodeSelector: {{ $.Values.minio.nodeSelector | nindent 8 }}
      {{- end }}
      {{- if $.Values.minio.tolerations }}
      tolerations: {{ toYaml $.Values.minio.tolerations | nindent 8 }}
      {{- end }}
      containers:
      - name: http
        image: {{ $.Values.minio.image }}:{{ $.Values.minio.tag | default $.Chart.AppVersion }}
        imagePullPolicy: {{ $.Values.minio.imagePullPolicy }}
        env:
        {{- $domains := list }}
        {{- range $hostname := $.Values.minio.nginx.hostnames }}
        {{-   $domains = (append $domains (trim $hostname.name)) }}
        {{- end }}
        {{- if $domains }}
        {{-   $domains = (join "," $domains) }}
        {{- else }}
        {{-   $domains = "" }}
        {{- end }}
        - name: "MINIO_DOMAIN"
          value: {{ $domains | quote }}
        - name: MINIO_ROOT_USER
          valueFrom: {"secretKeyRef":{"name":"minio-server", "key":"MINIO_ROOT_USER"}}
        - name: MINIO_ROOT_PASSWORD
          valueFrom: {"secretKeyRef":{"name":"minio-server", "key":"MINIO_ROOT_PASSWORD"}}
        {{- if $.Values.minio.cache.enabled }}
        - name: MINIO_CACHE
          value: "on"
        - name: MINIO_CACHE_DRIVES
          value: {{ $.Values.minio.cache.drives | quote }}
        - name: MINIO_CACHE_EXCLUDE
          value: {{ $.Values.minio.cache.exclude | quote }}
        - name: MINIO_CACHE_QUOTA
          value: {{ $.Values.minio.cache.quota | quote }}
        - name: MINIO_CACHE_AFTER
          value: {{ $.Values.minio.cache.after | quote }}
        - name: MINIO_CACHE_WATERMARK_LOW
          value: {{ $.Values.minio.cache.watermark_low | quote }}
        - name: MINIO_CACHE_WATERMARK_HIGH
          value: {{ $.Values.minio.cache.watermark_high | quote }}
        {{- end }}
        {{- if $.Values.minio.enableParquetFormat }}
        - name: MINIO_API_SELECT_PARQUET
          value: "on"
        {{- end }}
        {{- if $.Values.minio.auditWebhookEndpoint }}
        - name: MINIO_AUDIT_WEBHOOK_ENABLE_target1
          value: "on"
        - name: MINIO_AUDIT_WEBHOOK_AUTH_TOKEN_target1
          value: ""
        - name: MINIO_AUDIT_WEBHOOK_ENDPOINT_target1
          value: {{ if .Values.minio.metricsLogger.enable }}http://minio-logger:8500/logs{{ else }}{{ $.Values.minio.auditWebhookEndpoint | quote }}{{ end }}
        {{- end }}
        {{- if $.Values.minio.skipWaitForAuditWebhook }}
        - name: SKIP_WAIT_FOR_AUDIT_WEBHOOK
          value: "yes"
        {{- end }}
        - name: MINIO_GATEWAY_DEPLOYMENT_ID
          value: {{ $.Values.minio.MINIO_GATEWAY_DEPLOYMENT_ID | quote }}
        - name: MINIO_EXTRA_ARGS
          value: {{ $.Values.minio.MINIO_EXTRA_ARGS | quote }}
        {{- if $.Values.minio.initDebugEnable }}
        - name: CWM_INIT_DEBUG
          value: "yes"
        {{- end }}
        - name: CWM_INIT_CURL_MAX_TIME
          value: "{{ $.Values.minio.initCurlMaxTime }}"
        {{- if $.Values.minio.enablePrometheusAuthTypePublic }}
        - name: MINIO_PROMETHEUS_AUTH_TYPE
          value: "public"
        {{- end }}
        - name: INSTANCE_TYPE
          value: {{ $.Values.minio.INSTANCE_TYPE }}
        - name: GATEWAY_ARGS
          value: {{ $.Values.minio.GATEWAY_ARGS }}
        - name: AWS_ACCESS_KEY_ID
          value: {{ $.Values.minio.AWS_ACCESS_KEY_ID }}
        - name: AWS_SECRET_ACCESS_KEY
          value: {{ $.Values.minio.AWS_SECRET_ACCESS_KEY }}
        - name: GOOGLE_APPLICATION_CREDENTIALS_JSON
          value: {{ toJson $.Values.minio.GOOGLE_APPLICATION_CREDENTIALS | quote }}
        - name: AZURE_STORAGE_ACCOUNT_NAME
          value: {{ $.Values.minio.AZURE_STORAGE_ACCOUNT_NAME }}
        - name: AZURE_STORAGE_ACCOUNT_KEY
          value: {{ $.Values.minio.AZURE_STORAGE_ACCOUNT_KEY }}
        ports:
        - containerPort: 8080
          name: "p8080"
        startupProbe:
          exec:
            command: ["curl", "--max-time", "{{ $.Values.minio.startupProbe.curlMaxTimeSeconds }}", "--connect-timeout", "{{ $.Values.minio.startupProbe.curlConnectTimeoutSeconds }}", "-s", http://localhost:8080{{ $.Values.minio.startupProbe.path }}]
          initialDelaySeconds: {{ $.Values.minio.startupProbe.initialDelaySeconds }}
          periodSeconds: {{ $.Values.minio.startupProbe.periodSeconds }}
          timeoutSeconds: {{ $.Values.minio.startupProbe.timeoutSeconds }}
          successThreshold: {{ $.Values.minio.startupProbe.successThreshold }}
          failureThreshold: {{ $.Values.minio.startupProbe.failureThreshold }}
        livenessProbe:
          exec:
            command: ["curl", "--max-time", "{{ $.Values.minio.livenessProbe.curlMaxTimeSeconds }}", "--connect-timeout", "{{ $.Values.minio.livenessProbe.curlConnectTimeoutSeconds }}", "-s", http://localhost:8080{{ $.Values.minio.livenessProbe.path }}]
          initialDelaySeconds: {{ $.Values.minio.livenessProbe.initialDelaySeconds }}
          periodSeconds: {{ $.Values.minio.livenessProbe.periodSeconds }}
          timeoutSeconds: {{ $.Values.minio.livenessProbe.timeoutSeconds }}
          successThreshold: {{ $.Values.minio.livenessProbe.successThreshold }}
          failureThreshold: {{ $.Values.minio.livenessProbe.failureThreshold }}
        readinessProbe:
          exec:
            command: ["curl", "--max-time", "{{ $.Values.minio.readinessProbe.curlMaxTimeSeconds }}", "--connect-timeout", "{{ $.Values.minio.readinessProbe.curlConnectTimeoutSeconds }}", "-s", http://localhost:8080{{ $.Values.minio.readinessProbe.path }}]
          initialDelaySeconds: {{ $.Values.minio.readinessProbe.initialDelaySeconds }}
          periodSeconds: {{ $.Values.minio.readinessProbe.periodSeconds }}
          timeoutSeconds: {{ $.Values.minio.readinessProbe.timeoutSeconds }}
          successThreshold: {{ $.Values.minio.readinessProbe.successThreshold }}
          failureThreshold: {{ $.Values.minio.readinessProbe.failureThreshold }}
        resources: {{ toYaml $.Values.minio.resources | nindent 10 }}
        volumeMounts:
        {{- if eq $.Values.minio.INSTANCE_TYPE "" }}
        - mountPath: "/storage"
          name: "storage"
          {{- if $.Values.minio.storageVolumeSubPath }}
          subPath: {{ $.Values.minio.storageVolumeSubPath | quote }}
          {{- end }}
        {{- end }}
        - mountPath: "/cache"
          name: "cache"
          {{- if $.Values.minio.cacheVolumeSubPath }}
          subPath: {{ $.Values.minio.cacheVolumeSubPath | quote }}
          {{- end }}
      volumes:
      {{- if eq $.Values.minio.INSTANCE_TYPE "" }}
      - name: storage
        {{- if $.Values.minio.volumes.storage }}
{{ toYaml $.Values.minio.volumes.storage | indent 8 }}
        {{- else }}
        emptyDir: {}
        {{- end }}
      {{- end }}
      - name: cache
        {{- if $.Values.minio.volumes.cache }}
{{ toYaml $.Values.minio.volumes.cache | indent 8 }}
        {{- else }}
        emptyDir: {}
        {{- end }}
