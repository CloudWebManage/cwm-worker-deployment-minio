{{ if not .Values.minio.serveSingleProtocolPerPod }}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: minio
spec:
  replicas: {{ $.Values.minio.replicas }}
  revisionHistoryLimit: {{ $.Values.minio.revisionHistoryLimit }}
  selector:
    matchLabels:
      app: minio
  strategy:
{{ $.Values.minio.strategy | indent 4 }}
  template:
    metadata:
      labels:
        app: minio
    spec:
      dnsPolicy: ClusterFirst
      imagePullSecrets:
      {{ $.Values.minio.imagePullSecrets | indent 6 }}
      terminationGracePeriodSeconds: {{ $.Values.minio.terminationGracePeriodSeconds }}
      automountServiceAccountToken: false
      {{ if $.Values.minio.nodeSelector }}
      nodeSelector:
{{ $.Values.minio.nodeSelector | indent 8 }}
      {{ end }}
      {{- if $.Values.minio.tolerations }}
      tolerations:
{{ toYaml $.Values.minio.tolerations | indent 8 }}
      {{- end }}
      containers:
      {{ range .Values.minio.enabledProtocols }}
      - name: {{ . }}
        image: {{ $.Values.minio.image }}:{{ $.Values.minio.tag | default $.Chart.AppVersion }}
        imagePullPolicy: {{ $.Values.minio.imagePullPolicy }}
        env:
        - name: "MINIO_DOMAIN"
          value: {{ $.Values.minio.domain_name | quote }}
        - name: MINIO_ACCESS_KEY
          valueFrom: {"secretKeyRef":{"name":"minio", "key":"MINIO_ACCESS_KEY"}}
        - name: MINIO_SECRET_KEY
          valueFrom: {"secretKeyRef":{"name":"minio", "key":"MINIO_SECRET_KEY"}}
        {{ if eq . "https" }}
        - name: CERTIFICATE_PEM
          valueFrom: {"secretKeyRef":{"name":"minio", "key":"CERTIFICATE_PEM"}}
        - name: CERTIFICATE_KEY
          valueFrom: {"secretKeyRef":{"name":"minio", "key":"CERTIFICATE_KEY"}}
        {{ end }}
        {{ if $.Values.minio.cache.enabled }}
        - name: MINIO_CACHE
          value: "on"
        - name: MINIO_CACHE_DRIVES
          value: {{ $.Values.minio.cache.drives | quote }}
        - name: MINIO_CACHE_EXCLUDE
          value: {{ $.Values.minio.cache.exclude | quote }}
        - name: MINIO_CACHE_QUOTA
          value: {{ $.Values.minio.cache.quota | quote }}
        - name: MINIO_CACHE_AFTER
          value: {{ $.Values.minio.cache.after | quote }}
        - name: MINIO_CACHE_WATERMARK_LOW
          value: {{ $.Values.minio.cache.watermark_low | quote }}
        - name: MINIO_CACHE_WATERMARK_HIGH
          value: {{ $.Values.minio.cache.watermark_high | quote }}
        {{ end }}
        {{ if $.Values.minio.auditWebhookEndpoint }}
        - name: MINIO_AUDIT_WEBHOOK_ENABLE_target1
          value: "on"
        - name: MINIO_AUDIT_WEBHOOK_AUTH_TOKEN_target1
          value: ""
        - name: MINIO_AUDIT_WEBHOOK_ENDPOINT_target1
          value: {{ $.Values.minio.auditWebhookEndpoint | quote }}
        {{ end }}
        {{ if $.Values.minio.skipWaitForAuditWebhook }}
        - name: SKIP_WAIT_FOR_AUDIT_WEBHOOK
          value: "yes"
        {{ end }}
        - name: MINIO_GATEWAY_DEPLOYMENT_ID
          value: {{ if eq . "https" }}{{ $.Values.minio.MINIO_GATEWAY_DEPLOYMENT_ID_https | quote }}{{ else }}{{ $.Values.minio.MINIO_GATEWAY_DEPLOYMENT_ID_http | quote }}{{ end }}
        - name: MINIO_EXTRA_ARGS
          value: {{ $.Values.minio.MINIO_EXTRA_ARGS | quote }}
        {{ if $.Values.minio.initDebugEnable }}
        - name: CWM_INIT_DEBUG
          value: "yes"
        {{ end }}
        - name: CWM_INIT_CURL_MAX_TIME
          value: "{{ if eq . "https" }}{{ $.Values.minio.initCurlHttpsMaxTime }}{{ else }}{{ $.Values.minio.initCurlHttpMaxTime }}{{ end }}"
        {{ if $.Values.minio.enablePrometheusAuthTypePublic }}
        - name: MINIO_PROMETHEUS_AUTH_TYPE
          value: "public"
        {{ end }}
        - name: MINIO_BROWSER
          value: "{{ if $.Values.minio.browser }}on{{ else }}off{{ end }}"
        ports:
        {{ if eq . "http" }}
        - containerPort: 8080
          name: "p8080"
        {{ else }}
        - containerPort: 8443
          name: "p8443"
        {{ end }}
        startupProbe:
          exec:
            command: ["curl", "--max-time", "{{ if eq . "https" }}{{ $.Values.minio.startupProbe.curlHttpsMaxTimeSeconds }}{{ else }}{{ $.Values.minio.startupProbe.curlHttpMaxTimeSeconds }}{{ end }}", "-s", {{ if eq . "https" }}"-k", https://localhost:8443{{ else }}http://localhost:8080{{ end }}{{ $.Values.minio.startupProbe.path }}]
          initialDelaySeconds: {{ $.Values.minio.startupProbe.initialDelaySeconds }}
          periodSeconds: {{ $.Values.minio.startupProbe.periodSeconds }}
          timeoutSeconds: {{ $.Values.minio.startupProbe.timeoutSeconds }}
          successThreshold: {{ $.Values.minio.startupProbe.successThreshold }}
          failureThreshold: {{ $.Values.minio.startupProbe.failureThreshold }}
        livenessProbe:
          exec:
            command: ["curl", "--max-time", "{{ if eq . "https" }}{{ $.Values.minio.livenessProbe.curlHttpsMaxTimeSeconds }}{{ else }}{{ $.Values.minio.livenessProbe.curlHttpMaxTimeSeconds }}{{ end }}", "-s", {{ if eq . "https" }}"-k", https://localhost:8443{{ else }}http://localhost:8080{{ end }}{{ $.Values.minio.livenessProbe.path }}]
          initialDelaySeconds: {{ $.Values.minio.livenessProbe.initialDelaySeconds }}
          periodSeconds: {{ $.Values.minio.livenessProbe.periodSeconds }}
          timeoutSeconds: {{ $.Values.minio.livenessProbe.timeoutSeconds }}
          successThreshold: {{ $.Values.minio.livenessProbe.successThreshold }}
          failureThreshold: {{ $.Values.minio.livenessProbe.failureThreshold }}
        readinessProbe:
          exec:
            command: ["curl", "--max-time", "{{ if eq . "https" }}{{ $.Values.minio.readinessProbe.curlHttpsMaxTimeSeconds }}{{ else }}{{ $.Values.minio.readinessProbe.curlHttpMaxTimeSeconds }}{{ end }}", "-s", {{ if eq . "https" }}"-k", https://localhost:8443{{ else }}http://localhost:8080{{ end }}{{ $.Values.minio.readinessProbe.path }}]
          initialDelaySeconds: {{ $.Values.minio.readinessProbe.initialDelaySeconds }}
          periodSeconds: {{ $.Values.minio.readinessProbe.periodSeconds }}
          timeoutSeconds: {{ $.Values.minio.readinessProbe.timeoutSeconds }}
          successThreshold: {{ $.Values.minio.readinessProbe.successThreshold }}
          failureThreshold: {{ $.Values.minio.readinessProbe.failureThreshold }}
        resources:
{{ if eq . "http" }}
{{ toYaml $.Values.minio.httpResources | indent 10 }}
{{ else }}
{{ toYaml $.Values.minio.httpsResources | indent 10 }}
{{ end }}
        volumeMounts:
        - mountPath: "/storage"
          name: "storage"
        - mountPath: "/cache"
          name: "cache"
      {{ end }}
      {{ if $.Values.minio.metricsLogger.enable }}
      - name: logger
        image: {{ $.Values.minio.metricsLogger.image }}
        imagePullPolicy: {{ $.Values.minio.metricsLogger.imagePullPolicy }}
        resources:
{{ toYaml $.Values.minio.metricsLogger.resources | indent 10 }}
        volumeMounts:
        - name: "fluentd-conf-volume"
          mountPath: "/fluentd/etc/"
          readOnly: true
        env:
        - name: LOG_PROVIDER
          value: {{ $.Values.minio.metricsLogger.LOG_PROVIDER | default "default" | quote }}
      {{ end }}
      {{ if $.Values.minio.metricsLogger.withRedis }}
      - name: redis
        image: redis
      {{ end }}
      volumes:
      {{ if $.Values.minio.metricsLogger.enable }}
      - name: fluentd-conf-volume
        configMap:
          name: fluentd-conf
      {{ end }}
      - name: storage
{{ $.Values.minio.volumes.storage | indent 8 }}
      - name: cache
{{ $.Values.minio.volumes.cache | indent 8 }}
{{ end }}
